// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package jp.co.cyberagent.aeromock.cli.schema

/**
usage:
val obj = scalaxb.fromXML[jp.co.cyberagent.aeromock.cli.schema.Foo](node)
val document = scalaxb.toXML[jp.co.cyberagent.aeromock.cli.schema.Foo](obj, "foo", jp.co.cyberagent.aeromock.cli.schema.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val SchemaTestsuiteFormat: scalaxb.XMLFormat[jp.co.cyberagent.aeromock.cli.schema.Testsuite] = new DefaultSchemaTestsuiteFormat {}
  implicit lazy val SchemaTestsuitesFormat: scalaxb.XMLFormat[jp.co.cyberagent.aeromock.cli.schema.Testsuites] = new DefaultSchemaTestsuitesFormat {}
  implicit lazy val SchemaPropertyFormat: scalaxb.XMLFormat[jp.co.cyberagent.aeromock.cli.schema.Property] = new DefaultSchemaPropertyFormat {}
  implicit lazy val SchemaPropertiesFormat: scalaxb.XMLFormat[jp.co.cyberagent.aeromock.cli.schema.Properties] = new DefaultSchemaPropertiesFormat {}
  implicit lazy val SchemaErrorFormat: scalaxb.XMLFormat[jp.co.cyberagent.aeromock.cli.schema.Error] = new DefaultSchemaErrorFormat {}
  implicit lazy val SchemaFailureTypeFormat: scalaxb.XMLFormat[jp.co.cyberagent.aeromock.cli.schema.FailureType] = new DefaultSchemaFailureTypeFormat {}
  implicit lazy val SchemaTestcaseFormat: scalaxb.XMLFormat[jp.co.cyberagent.aeromock.cli.schema.Testcase] = new DefaultSchemaTestcaseFormat {}
  implicit lazy val SchemaTestsuitableFormat: scalaxb.XMLFormat[jp.co.cyberagent.aeromock.cli.schema.Testsuitable] = new DefaultSchemaTestsuitableFormat {}
  implicit lazy val SchemaTestsuiteTypeFormat: scalaxb.XMLFormat[jp.co.cyberagent.aeromock.cli.schema.TestsuiteType] = new DefaultSchemaTestsuiteTypeFormat {}

  trait DefaultSchemaTestsuiteFormat extends scalaxb.ElemNameParser[jp.co.cyberagent.aeromock.cli.schema.Testsuite] {
    val targetNamespace: Option[String] = None

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[jp.co.cyberagent.aeromock.cli.schema.Testsuite] =
      phrase((scalaxb.ElemName(None, "properties")) ~
      rep(scalaxb.ElemName(None, "testcase")) ~
      (scalaxb.ElemName(None, "system-out")) ~
      (scalaxb.ElemName(None, "system-err")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      jp.co.cyberagent.aeromock.cli.schema.Testsuite(scalaxb.fromXML[jp.co.cyberagent.aeromock.cli.schema.Properties](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[jp.co.cyberagent.aeromock.cli.schema.Testcase](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar]((node \ "@timestamp"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@hostname"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int]((node \ "@tests"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int]((node \ "@failures"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int]((node \ "@errors"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal]((node \ "@time"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@package"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int]((node \ "@id"), scalaxb.ElemName(node) :: stack)) })

    override def writesAttribute(__obj: jp.co.cyberagent.aeromock.cli.schema.Testsuite, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(null, "timestamp", __obj.timestamp.toString, attr)
      attr = scala.xml.Attribute(null, "hostname", __obj.hostname.toString, attr)
      attr = scala.xml.Attribute(null, "tests", __obj.tests.toString, attr)
      attr = scala.xml.Attribute(null, "failures", __obj.failures.toString, attr)
      attr = scala.xml.Attribute(null, "errors", __obj.errors.toString, attr)
      attr = scala.xml.Attribute(null, "time", __obj.time.toString, attr)
      attr = scala.xml.Attribute(null, "package", __obj.packageValue.toString, attr)
      attr = scala.xml.Attribute(null, "id", __obj.id.toString, attr)
      attr
    }

    def writesChildNodes(__obj: jp.co.cyberagent.aeromock.cli.schema.Testsuite, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[jp.co.cyberagent.aeromock.cli.schema.Properties](__obj.properties, None, Some("properties"), __scope, false),
        __obj.testcase flatMap { scalaxb.toXML[jp.co.cyberagent.aeromock.cli.schema.Testcase](_, None, Some("testcase"), __scope, false) },
        scalaxb.toXML[String](__obj.systemu45out, None, Some("system-out"), __scope, false),
        scalaxb.toXML[String](__obj.systemu45err, None, Some("system-err"), __scope, false))

  }

  trait DefaultSchemaTestsuitesFormat extends scalaxb.ElemNameParser[jp.co.cyberagent.aeromock.cli.schema.Testsuites] {
    val targetNamespace: Option[String] = None

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[jp.co.cyberagent.aeromock.cli.schema.Testsuites] =
      phrase(rep(scalaxb.ElemName(None, "testsuite")) ^^
      { case p1 =>
      jp.co.cyberagent.aeromock.cli.schema.Testsuites(p1.toSeq map { scalaxb.fromXML[jp.co.cyberagent.aeromock.cli.schema.Testsuite](_, scalaxb.ElemName(node) :: stack) }: _*) })

    def writesChildNodes(__obj: jp.co.cyberagent.aeromock.cli.schema.Testsuites, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.testsuite flatMap { scalaxb.toXML[jp.co.cyberagent.aeromock.cli.schema.Testsuite](_, None, Some("testsuite"), __scope, false) })

  }

  trait DefaultSchemaPropertyFormat extends scalaxb.XMLFormat[jp.co.cyberagent.aeromock.cli.schema.Property] with scalaxb.CanWriteChildNodes[jp.co.cyberagent.aeromock.cli.schema.Property] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, jp.co.cyberagent.aeromock.cli.schema.Property] = seq match {
      case node: scala.xml.Node => Right(jp.co.cyberagent.aeromock.cli.schema.Property(scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@value"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: jp.co.cyberagent.aeromock.cli.schema.Property, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(null, "value", __obj.valueAttribute.toString, attr)
      attr
    }

    def writesChildNodes(__obj: jp.co.cyberagent.aeromock.cli.schema.Property, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultSchemaPropertiesFormat extends scalaxb.ElemNameParser[jp.co.cyberagent.aeromock.cli.schema.Properties] {
    val targetNamespace: Option[String] = None

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[jp.co.cyberagent.aeromock.cli.schema.Properties] =
      phrase(rep(scalaxb.ElemName(None, "property")) ^^
      { case p1 =>
      jp.co.cyberagent.aeromock.cli.schema.Properties(p1.toSeq map { scalaxb.fromXML[jp.co.cyberagent.aeromock.cli.schema.Property](_, scalaxb.ElemName(node) :: stack) }: _*) })

    def writesChildNodes(__obj: jp.co.cyberagent.aeromock.cli.schema.Properties, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.property flatMap { scalaxb.toXML[jp.co.cyberagent.aeromock.cli.schema.Property](_, None, Some("property"), __scope, false) })

  }

  trait DefaultSchemaErrorFormat extends scalaxb.XMLFormat[jp.co.cyberagent.aeromock.cli.schema.Error] with scalaxb.CanWriteChildNodes[jp.co.cyberagent.aeromock.cli.schema.Error] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, jp.co.cyberagent.aeromock.cli.schema.Error] = seq match {
      case node: scala.xml.Node => Right(jp.co.cyberagent.aeromock.cli.schema.Error(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        (node \ "@message").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@type"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: jp.co.cyberagent.aeromock.cli.schema.Error, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.message foreach { x => attr = scala.xml.Attribute(null, "message", x.toString, attr) }
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr
    }

    def writesChildNodes(__obj: jp.co.cyberagent.aeromock.cli.schema.Error, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultSchemaFailureTypeFormat extends scalaxb.XMLFormat[jp.co.cyberagent.aeromock.cli.schema.FailureType] with scalaxb.CanWriteChildNodes[jp.co.cyberagent.aeromock.cli.schema.FailureType] {
    val targetNamespace: Option[String] = None
    import scalaxb.ElemName._

    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, jp.co.cyberagent.aeromock.cli.schema.FailureType] = seq match {
      case node: scala.xml.Node => Right(jp.co.cyberagent.aeromock.cli.schema.FailureType(scalaxb.fromXML[String](node, scalaxb.ElemName(node) :: stack),
        (node \ "@message").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@type"), scalaxb.ElemName(node) :: stack)))
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    override def writesAttribute(__obj: jp.co.cyberagent.aeromock.cli.schema.FailureType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.message foreach { x => attr = scala.xml.Attribute(null, "message", x.toString, attr) }
      attr = scala.xml.Attribute(null, "type", __obj.typeValue.toString, attr)
      attr
    }

    def writesChildNodes(__obj: jp.co.cyberagent.aeromock.cli.schema.FailureType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq(scala.xml.Text(__obj.value.toString))


  }

  trait DefaultSchemaTestcaseFormat extends scalaxb.ElemNameParser[jp.co.cyberagent.aeromock.cli.schema.Testcase] {
    val targetNamespace: Option[String] = None

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[jp.co.cyberagent.aeromock.cli.schema.Testcase] =
      phrase(opt(((scalaxb.ElemName(None, "error")) ^^
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[jp.co.cyberagent.aeromock.cli.schema.Error](x, scalaxb.ElemName(node) :: stack)))) |
      ((scalaxb.ElemName(None, "failure")) ^^
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[jp.co.cyberagent.aeromock.cli.schema.FailureType](x, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 =>
      jp.co.cyberagent.aeromock.cli.schema.Testcase(p1,
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@classname"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal]((node \ "@time"), scalaxb.ElemName(node) :: stack)) })

    override def writesAttribute(__obj: jp.co.cyberagent.aeromock.cli.schema.Testcase, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(null, "classname", __obj.classname.toString, attr)
      attr = scala.xml.Attribute(null, "time", __obj.time.toString, attr)
      attr
    }

    def writesChildNodes(__obj: jp.co.cyberagent.aeromock.cli.schema.Testcase, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.testcaseoption map { x => scalaxb.toXML[scalaxb.DataRecord[jp.co.cyberagent.aeromock.cli.schema.TestcaseOption]](x, x.namespace, x.key, __scope, false) } getOrElse {Nil})

  }

  trait DefaultSchemaTestsuitableFormat extends scalaxb.XMLFormat[jp.co.cyberagent.aeromock.cli.schema.Testsuitable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, jp.co.cyberagent.aeromock.cli.schema.Testsuitable] = seq match {
      case node: scala.xml.Node =>
        scalaxb.Helper.instanceType(node) match {

          case _ => Right(scalaxb.fromXML[jp.co.cyberagent.aeromock.cli.schema.TestsuiteType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }

    def writes(__obj: jp.co.cyberagent.aeromock.cli.schema.Testsuitable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: jp.co.cyberagent.aeromock.cli.schema.Testsuite => scalaxb.toXML[jp.co.cyberagent.aeromock.cli.schema.Testsuite](x, __namespace, __elementLabel, __scope, true)
      case x: jp.co.cyberagent.aeromock.cli.schema.TestsuiteType => scalaxb.toXML[jp.co.cyberagent.aeromock.cli.schema.TestsuiteType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultSchemaTestsuiteTypeFormat extends scalaxb.ElemNameParser[jp.co.cyberagent.aeromock.cli.schema.TestsuiteType] {
    val targetNamespace: Option[String] = None

    override def typeName: Option[String] = Some("testsuite")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[jp.co.cyberagent.aeromock.cli.schema.TestsuiteType] =
      phrase((scalaxb.ElemName(None, "properties")) ~
      rep(scalaxb.ElemName(None, "testcase")) ~
      (scalaxb.ElemName(None, "system-out")) ~
      (scalaxb.ElemName(None, "system-err")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      jp.co.cyberagent.aeromock.cli.schema.TestsuiteType(scalaxb.fromXML[jp.co.cyberagent.aeromock.cli.schema.Properties](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[jp.co.cyberagent.aeromock.cli.schema.Testcase](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar]((node \ "@timestamp"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String]((node \ "@hostname"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int]((node \ "@tests"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int]((node \ "@failures"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int]((node \ "@errors"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal]((node \ "@time"), scalaxb.ElemName(node) :: stack)) })

    override def writesAttribute(__obj: jp.co.cyberagent.aeromock.cli.schema.TestsuiteType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(null, "timestamp", __obj.timestamp.toString, attr)
      attr = scala.xml.Attribute(null, "hostname", __obj.hostname.toString, attr)
      attr = scala.xml.Attribute(null, "tests", __obj.tests.toString, attr)
      attr = scala.xml.Attribute(null, "failures", __obj.failures.toString, attr)
      attr = scala.xml.Attribute(null, "errors", __obj.errors.toString, attr)
      attr = scala.xml.Attribute(null, "time", __obj.time.toString, attr)
      attr
    }

    def writesChildNodes(__obj: jp.co.cyberagent.aeromock.cli.schema.TestsuiteType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[jp.co.cyberagent.aeromock.cli.schema.Properties](__obj.properties, None, Some("properties"), __scope, false),
        __obj.testcase flatMap { scalaxb.toXML[jp.co.cyberagent.aeromock.cli.schema.Testcase](_, None, Some("testcase"), __scope, false) },
        scalaxb.toXML[String](__obj.systemu45out, None, Some("system-out"), __scope, false),
        scalaxb.toXML[String](__obj.systemu45err, None, Some("system-err"), __scope, false))

  }


}

